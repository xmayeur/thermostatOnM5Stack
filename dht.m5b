{"category":"dht12ow","color":"#00b7b7","blocks":["__dht12ow_init","__dht12ow_temperature","__dht12ow_humidity"],"jscode":"// Block __dht12ow_init\nvar __dht12ow_init_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"dht init\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"pin\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"pin\"\n        }\n    ],\n    \"colour\": \"#00b7b7\"\n};\n\nwindow['Blockly'].Blocks['__dht12ow_init'] = {\n    init: function() {\n        this.jsonInit(__dht12ow_init_json);\n    }\n};\n\nwindow['Blockly'].Python['__dht12ow_init'] = function(block) {\n    var pin = block.getFieldValue('pin');\n    return `from machine import Pin\nfrom esp import dht_readinto\n\nDHT_PIN = ${pin}\n\ndef readHumidity():\n  buf = bytearray(5)\n  try:\n    dht_readinto(Pin(DHT_PIN), buf)\n  except:\n    pass\n  return(buf[0] + buf[1]*0.1)\n\ndef readTemperature():\n  buf = bytearray(5)\n  try:\n    dht_readinto(Pin(DHT_PIN), buf)\n  except:\n    pass\n  return(buf[2] + buf[3]*0.1)` + \"\\n\";\n};\n\n// Block __dht12ow_temperature\nvar __dht12ow_temperature_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"read temperature\"\n        }\n    ],\n    \"colour\": \"#00b7b7\"\n};\n\nwindow['Blockly'].Blocks['__dht12ow_temperature'] = {\n    init: function() {\n        this.jsonInit(__dht12ow_temperature_json);\n    }\n};\n\nwindow['Blockly'].Python['__dht12ow_temperature'] = function(block) {\n        return [`readTemperature()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __dht12ow_humidity\nvar __dht12ow_humidity_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"read humidity\"\n        }\n    ],\n    \"colour\": \"#00b7b7\"\n};\n\nwindow['Blockly'].Blocks['__dht12ow_humidity'] = {\n    init: function() {\n        this.jsonInit(__dht12ow_humidity_json);\n    }\n};\n\nwindow['Blockly'].Python['__dht12ow_humidity'] = function(block) {\n        return [`readHumidity()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n"}